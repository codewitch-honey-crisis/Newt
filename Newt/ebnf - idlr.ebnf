grammar<start>= production { production };

production= cws identifier cws [ "<" cws attributes cws ">" cws ] cws "=" cws expressions cws ";";

expressions= cws expression "|" expressions | cws expression |;
expression= { symbol };

symbol= literal | regex | identifier | 
	"(" expressions cws ")" | 
	"[" expressions cws "]" |
	"{" expressions cws "}";

attributes= attribute { "," cws attribute };
attribute= cws identifier [ cws "=" cws attrvalue ];
attrvalue= literal | integer | identifier;

cws = {whitespace | lineComment | blockComment};

//
// terminals
//

literal= '"([^"\\]|\\.)*"';
regex= '\'([^\'\\]|\\.)*\'';
identifier= '[A-Z_a-z][\-0-9A-Z_a-z]*';
integer= '\-?[0-9]+';

// comment and whitespace terminals
whitespace= '[ \v\f\t\r\n]+';
lineComment= '//[^\n]*';
blockComment<blockEnd="*/">= "/*";

// defining these isn't required, but gives
// us better constant names
or="|";
lt="<";
gt=">";
eq="=";
semi=";";
comma=",";
lparen="(";
rparen=")";
lbracket="[";
rbracket="]";
lbrace="{";
rbrace="}";
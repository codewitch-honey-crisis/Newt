/*
	ebnf.ebnf - A grammar for a simple to 
	use and concise attributed EBNF variant 
	
               - by codewitch honey crisis
*/

// always declare a start symbol
// a start symbol is slightly restricted
// in that it cannot be automatically
// left factored, so you should keep it
// simple. Here, we use the <start> attribute
// it's shorthand for <start=true>
grammar<start>= productions;

// { } denotes repetition zero or more times
productions = production productions | production;

// [ ] denotes optional, and literals are being
// declared inline (so far, implicitly named)
production= identifier productionpart;

productionpart = "<" attributes ">" "=" expressions ";" | "=" expressions ";";

// another repetition, this time with a "|" delim
expressions= expression "|" expressions | "|" expression;
symbol= literal | regex | identifier | 
	"(" expressions ")" | 
	"[" expressions "]" |
	"{" expressions "}";

// an expression is empty or one or more symbols
expression= symbols;
symbols = symbol symbols | symbol |;
attributes= attribute "," attributes | attribute;
attribute= identifier attributepart;

attributepart = "=" attrvalue |;
attrvalue = literal | integer | identifier ;

// here we can use '' regex or "" quotes
// It's good practice to keep regexs
// defined seperately rather than inline
// it makes things easier to read
literal= '"([^"\\]|\\.)*"';
regex= '\'([^\'\\]|\\.)*\'';
identifier= '[A-Z_a-z][\-0-9A-Z_a-z]*';
integer<type="int">= '\-?[0-9]+';

// and our <hidden> terminals
// these don't get passed through
// to the parser, so they don't 
// appear in the grammar above.
// when the parser sees a hidden
// terminal, it ignores it/skips it 
// altogether
whitespace<hidden>= '[ \v\f\t\r\n]';
lineComment<hidden>= '//[^\n]*';
blockComment<hidden,blockEnd="*/">= "/*";

// and here we explicitly give names to 
// the literals we declared inline before. 
//
// we don't need to declare these terminals, but 
// doing so avoids the system giving them implicit
// names like "implicit1", "implicit2", as constants
or="|";
lt="<";
gt=">";
eq="=";
terminator=";";
comma=",";
lparen="(";
rparen=")";
lbracket="[";
rbracket="]";
lbrace="{";
rbrace="}";